@mixin centerer {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin bgimage {
    background-size: cover;
    background-position: center center;
    background-repeat: no-repeat;
}

@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

// this will set column widths for grid items
@function colWidth($w, $c, $g) {
    @return (($w - (($c - 1) * $g)) / $c);
}


// 
// 
// 
@mixin flexboxGrid($cols: 3, $gutter: 30px, $align: stretch, $aspect: false, $grow : 0, $shrink: 1) {

    // calculate flex basis (width) of a column
    $basis: calc((100% - (#{$cols} - 1) * #{$gutter}) / #{$cols});

    >ul {
        display: flex;
        flex-flow: row wrap;
        align-items: $align;

        >li {
            // width: #{$basis};            // enable this to prevent a bug where the columns dont end up the correct width (child element has margin or something)
            flex: $grow $shrink #{$basis};
            margin: 0 $gutter $gutter 0;
            overflow: hidden;

            &:nth-child(n+1) {
                margin: 0 $gutter $gutter 0;
            }

            &:nth-child(#{$cols}n) {
                margin-right: 0;
            }

            &:last-child {
                margin-right: 0;
            }

            // if 1 col is passed (for mobile)
            @if #{$cols}=='1' {
                flex: 1 0 100%;
                margin: 0 0 $gutter 0;

                &:last-child {
                    margin: 0 0 0 0;
                }
            }

            @if $align==true {
                @include aspectRatio(1, 1);
            }
        }
    }
}

//
// 
// 
@mixin aspectRatio($x : 1, $y : 1) {
    $ratio: ($y / $x) * 100%;
    position: relative;

    &:before {
        content: '';
        display: block;
        padding-top: $ratio;
    }
}